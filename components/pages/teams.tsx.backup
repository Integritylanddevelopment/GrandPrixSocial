"use client"
import { useState } from "react"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import {
  Search,
  Plus,
  Trophy,
  TrendingUp,
  Crown,
  Target,
  HelpCircle,
  BookOpen,
  Zap,
  Timer,
  CloudRain,
  Mic,
  Flag,
  Users,
  Star,
  Settings,
  Wrench,
  Fuel,
  Shield,
  Flame,
} from "lucide-react"
import { AuthButtons } from "@/components/auth/auth-buttons"
export default function Teams() {
  const [activeTab, setActiveTab] = useState("")
  const [searchTerm, setSearchTerm] = useState("")
  const [showHowToPlay, setShowHowToPlay] = useState(false)
  const [showRules, setShowRules] = useState(false)
  const [showTeamModal, setShowTeamModal] = useState(false)
  const [availableDrivers] = useState([
    // Red Bull Racing
    { name: "Max Verstappen", team: "Red Bull", price: 32000000, points: 575, form: "excellent", engine: "Honda" },
    { name: "Yuki Tsunoda", team: "Red Bull", price: 18000000, points: 152, form: "good", engine: "Honda" },
    // Ferrari
    { name: "Charles Leclerc", team: "Ferrari", price: 28000000, points: 356, form: "excellent", engine: "Ferrari" },
    { name: "Lewis Hamilton", team: "Ferrari", price: 30000000, points: 223, form: "good", engine: "Ferrari" },
    // McLaren
    { name: "Lando Norris", team: "McLaren", price: 26000000, points: 374, form: "excellent", engine: "Mercedes" },
    { name: "Oscar Piastri", team: "McLaren", price: 22000000, points: 292, form: "excellent", engine: "Mercedes" },
    // Mercedes
    { name: "George Russell", team: "Mercedes", price: 20000000, points: 245, form: "good", engine: "Mercedes" },
    { name: "Kimi Antonelli", team: "Mercedes", price: 15000000, points: 89, form: "average", engine: "Mercedes" },
    // Aston Martin
    { name: "Fernando Alonso", team: "Aston Martin", price: 24000000, points: 156, form: "good", engine: "Mercedes" },
    { name: "Lance Stroll", team: "Aston Martin", price: 12000000, points: 67, form: "average", engine: "Mercedes" },
    // Alpine
    { name: "Pierre Gasly", team: "Alpine", price: 16000000, points: 134, form: "good", engine: "Renault" },
    { name: "Franco Colapinto", team: "Alpine", price: 10000000, points: 45, form: "average", engine: "Renault" },
    // Williams
    { name: "Alex Albon", team: "Williams", price: 14000000, points: 98, form: "good", engine: "Mercedes" },
    { name: "Carlos Sainz", team: "Williams", price: 22000000, points: 290, form: "good", engine: "Mercedes" },
    // Racing Bulls
    { name: "Liam Lawson", team: "Racing Bulls", price: 12000000, points: 76, form: "average", engine: "Honda" },
    { name: "Isack Hadjar", team: "Racing Bulls", price: 8000000, points: 34, form: "average", engine: "Honda" },
    // Haas
    { name: "Oliver Bearman", team: "Haas", price: 10000000, points: 56, form: "average", engine: "Ferrari" },
    { name: "Esteban Ocon", team: "Haas", price: 14000000, points: 87, form: "good", engine: "Ferrari" },
    // Sauber
    { name: "Nico Hülkenberg", team: "Sauber", price: 16000000, points: 112, form: "good", engine: "Ferrari" },
    { name: "Gabriel Bortoleto", team: "Sauber", price: 8000000, points: 23, form: "average", engine: "Ferrari" },
  ])
  const [constructors] = useState([
    {
      name: "Red Bull Racing",
      price: 20000000,
      points: 860,
      form: "excellent",
      engine: "Honda",
      drivers: ["Max Verstappen", "Yuki Tsunoda"],
    },
    {
      name: "Ferrari",
      price: 18000000,
      points: 652,
      form: "excellent",
      engine: "Ferrari",
      drivers: ["Charles Leclerc", "Lewis Hamilton"],
    },
    {
      name: "McLaren",
      price: 19000000,
      points: 666,
      form: "excellent",
      engine: "Mercedes",
      drivers: ["Lando Norris", "Oscar Piastri"],
    },
    {
      name: "Mercedes",
      price: 16000000,
      points: 468,
      form: "good",
      engine: "Mercedes",
      drivers: ["George Russell", "Kimi Antonelli"],
    },
    {
      name: "Aston Martin",
      price: 12000000,
      points: 94,
      form: "average",
      engine: "Mercedes",
      drivers: ["Fernando Alonso", "Lance Stroll"],
    },
    {
      name: "Alpine",
      price: 10000000,
      points: 89,
      form: "average",
      engine: "Renault",
      drivers: ["Pierre Gasly", "Franco Colapinto"],
    },
    {
      name: "Williams",
      price: 11000000,
      points: 156,
      form: "good",
      engine: "Mercedes",
      drivers: ["Alex Albon", "Carlos Sainz"],
    },
    {
      name: "Racing Bulls",
      price: 8000000,
      points: 67,
      form: "average",
      engine: "Honda",
      drivers: ["Liam Lawson", "Isack Hadjar"],
    },
    {
      name: "Haas",
      price: 9000000,
      points: 78,
      form: "average",
      engine: "Ferrari",
      drivers: ["Oliver Bearman", "Esteban Ocon"],
    },
    {
      name: "Sauber",
      price: 7000000,
      points: 45,
      form: "poor",
      engine: "Ferrari",
      drivers: ["Nico Hülkenberg", "Gabriel Bortoleto"],
    },
  ])
  const [teamPrincipals] = useState([
    { name: "Christian Horner", team: "Red Bull", price: 5000000, points: 45, specialty: "Strategy" },
    { name: "Fred Vasseur", team: "Ferrari", price: 4500000, points: 38, specialty: "Technical" },
    { name: "Andrea Stella", team: "McLaren", price: 4200000, points: 42, specialty: "Operations" },
    { name: "Toto Wolff", team: "Mercedes", price: 4800000, points: 35, specialty: "Leadership" },
    { name: "Mike Krack", team: "Aston Martin", price: 3200000, points: 28, specialty: "Development" },
    { name: "Oliver Oakes", team: "Alpine", price: 3000000, points: 25, specialty: "Innovation" },
    { name: "James Vowles", team: "Williams", price: 3500000, points: 32, specialty: "Engineering" },
    { name: "Laurent Mekies", team: "Racing Bulls", price: 2800000, points: 22, specialty: "Technical" },
    { name: "Ayao Komatsu", team: "Haas", price: 2500000, points: 20, specialty: "Operations" },
    { name: "Alessandro Alunni Bravi", team: "Sauber", price: 2200000, points: 18, specialty: "Management" },
  ])
  const [engineers] = useState([
    { name: "Adrian Newey", team: "Aston Martin", price: 8000000, points: 65, specialty: "Aerodynamics" },
    { name: "James Allison", team: "Mercedes", price: 6500000, points: 58, specialty: "Technical Director" },
    { name: "Enrico Cardile", team: "Ferrari", price: 6200000, points: 55, specialty: "Chassis" },
    { name: "Peter Prodromou", team: "McLaren", price: 5800000, points: 52, specialty: "Aerodynamics" },
    { name: "Pierre Waché", team: "Red Bull", price: 7200000, points: 62, specialty: "Technical Director" },
    { name: "Pat Fry", team: "Alpine", price: 4500000, points: 38, specialty: "Engineering" },
    { name: "Dave Robson", team: "Williams", price: 4200000, points: 35, specialty: "Vehicle Performance" },
    { name: "Jody Egginton", team: "Racing Bulls", price: 3800000, points: 32, specialty: "Technical Director" },
    { name: "Simone Resta", team: "Haas", price: 3500000, points: 28, specialty: "Technical Director" },
    { name: "Jan Monchaux", team: "Sauber", price: 3200000, points: 25, specialty: "Technical Director" },
  ])
  const [engines] = useState([
    { name: "Mercedes-AMG F1 M15", manufacturer: "Mercedes", price: 3500000, points: 45, power: 1000, reliability: 92 },
    { name: "Ferrari 067/11", manufacturer: "Ferrari", price: 3800000, points: 48, power: 1005, reliability: 89 },
    { name: "Honda RBPT H25", manufacturer: "Honda", price: 3600000, points: 52, power: 1010, reliability: 94 },
    { name: "Renault E-Tech RE25", manufacturer: "Renault", price: 3200000, points: 35, power: 995, reliability: 87 },
  ])
  const [tireStrategies] = useState([
    { name: "Aggressive", description: "Soft-Medium-Hard", price: 500000, points: 12, risk: "High", reward: "High" },
    {
      name: "Conservative",
      description: "Hard-Medium-Medium",
      price: 300000,
      points: 8,
      risk: "Low",
      reward: "Medium",
    },
    { name: "Balanced", description: "Medium-Hard-Soft", price: 400000, points: 10, risk: "Medium", reward: "Medium" },
    {
      name: "Gambler",
      description: "Soft-Soft-Medium",
      price: 600000,
      points: 15,
      risk: "Very High",
      reward: "Very High",
    },
    { name: "Endurance", description: "Hard-Hard-Medium", price: 250000, points: 6, risk: "Very Low", reward: "Low" },
  ])
  const [pitCrews] = useState([
    { name: "Red Bull Pit Crew", team: "Red Bull", price: 2500000, avgTime: 2.3, points: 28, specialty: "Speed" },
    { name: "Ferrari Pit Crew", team: "Ferrari", price: 2400000, avgTime: 2.4, points: 26, specialty: "Precision" },
    { name: "McLaren Pit Crew", team: "McLaren", price: 2300000, avgTime: 2.5, points: 25, specialty: "Consistency" },
    { name: "Mercedes Pit Crew", team: "Mercedes", price: 2200000, avgTime: 2.6, points: 22, specialty: "Reliability" },
    {
      name: "Aston Martin Pit Crew",
      team: "Aston Martin",
      price: 1800000,
      avgTime: 2.8,
      points: 18,
      specialty: "Strategy",
    },
    { name: "Alpine Pit Crew", team: "Alpine", price: 1600000, avgTime: 2.9, points: 16, specialty: "Adaptability" },
    { name: "Williams Pit Crew", team: "Williams", price: 1500000, avgTime: 3.0, points: 15, specialty: "Improvement" },
    {
      name: "Racing Bulls Pit Crew",
      team: "Racing Bulls",
      price: 1400000,
      avgTime: 3.1,
      points: 14,
      specialty: "Learning",
    },
    { name: "Haas Pit Crew", team: "Haas", price: 1300000, avgTime: 3.2, points: 12, specialty: "Efficiency" },
    { name: "Sauber Pit Crew", team: "Sauber", price: 1200000, avgTime: 3.3, points: 10, specialty: "Development" },
  ])
  const [myTeam, setMyTeam] = useState({
    name: "Red Lightning Racing",
    budget: 100000000, // $100M budget
    drivers: [
      { name: "Max Verstappen", team: "Red Bull", price: 32000000, points: 575 },
      { name: "Lando Norris", team: "McLaren", price: 28000000, points: 374 },
    ],
    constructor: { name: "Red Bull Racing", price: 20000000, points: 860 },
    principal: null,
    engineer: null,
    engine: null,
    pitCrew: null,
    tireStrategy: null,
    totalPoints: 1809,
    rank: 1247,
  })
  const [isEditingTeamName, setIsEditingTeamName] = useState(false)
  const [newTeamName, setNewTeamName] = useState(myTeam.name)
  const teamNameOptions = [
    "Red Lightning Racing",
    "Thunder Strike F1",
    "Velocity Vanguard",
    "Phoenix Racing Team", 
    "Storm Chasers F1",
    "Apex Predators",
    "Lightning Bolts Racing"
  ]
  const [leaderboard] = useState([
    { rank: 1, name: "F1_Master_2025", team: "Speed Demons", points: 2156, change: 0 },
    { rank: 2, name: "RacingLegend", team: "Velocity Kings", points: 2089, change: 1 },
    { rank: 3, name: "TurboCharged", team: "Lightning Bolts", points: 2034, change: -1 },
    { rank: 4, name: "PolePosition", team: "Track Warriors", points: 1998, change: 2 },
    { rank: 5, name: "SpeedDemon", team: "Racing Royals", points: 1967, change: -1 },
  ])
  const filteredDrivers = availableDrivers.filter(
    (driver) =>
      driver.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      driver.team.toLowerCase().includes(searchTerm.toLowerCase()),
  )
  const formatCurrency = (amount: number) => {
    return `$${(amount / 1000000).toFixed(1)}M`
  }
  const calculateTotalSpent = () => {
    const driversSpent = myTeam.drivers.reduce((sum, d) => sum + d.price, 0)
    const constructorSpent = myTeam.constructor?.price || 0
    const principalSpent = myTeam.principal?.price || 0
    const engineerSpent = myTeam.engineer?.price || 0
    const engineSpent = myTeam.engine?.price || 0
    const pitCrewSpent = myTeam.pitCrew?.price || 0
    const tireStrategySpent = myTeam.tireStrategy?.price || 0
    
    return driversSpent + constructorSpent + principalSpent + engineerSpent + engineSpent + pitCrewSpent + tireStrategySpent
  }
  const calculateTotalPoints = () => {
    const driversPoints = myTeam.drivers.reduce((sum, d) => sum + d.points, 0)
    const constructorPoints = myTeam.constructor?.points || 0
    const principalPoints = myTeam.principal?.points || 0
    const engineerPoints = myTeam.engineer?.points || 0
    const enginePoints = myTeam.engine?.points || 0
    const pitCrewPoints = myTeam.pitCrew?.points || 0
    const tireStrategyPoints = myTeam.tireStrategy?.points || 0
    
    return driversPoints + constructorPoints + principalPoints + engineerPoints + enginePoints + pitCrewPoints + tireStrategyPoints
  }
  const getFormColor = (form: string) => {
    switch (form) {
      case "excellent":
        return "text-green-500"
      case "good":
        return "text-blue-500"
      case "average":
        return "text-yellow-500"
      case "poor":
        return "text-red-500"
      default:
        return "text-gray-500"
    }
  }
  const getFormBadge = (form: string) => {
    switch (form) {
      case "excellent":
        return "bg-green-100 text-green-800"
      case "good":
        return "bg-blue-100 text-blue-800"
      case "average":
        return "bg-yellow-100 text-yellow-800"
      case "poor":
        return "bg-red-100 text-red-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }
  return (
    <div className="min-h-screen bg-gradient-to-br from-black via-slate-950 to-red-950">
      <div className="relative overflow-hidden">
        <div className="absolute inset-0 bg-gradient-to-r from-red-950/10 to-red-900/10" />
        <div className="relative container mx-auto px-4 py-8 space-y-8">
          <div className="text-center space-y-6">
            <div className="flex items-center justify-center gap-3">
              <Trophy className="w-8 h-8 text-purple-400" />
              <h1 className="text-5xl font-bold font-orbitron text-purple-400" style={{ filter: 'drop-shadow(0 0 10px rgba(255, 255, 255, 0.3))' }}>
                Fantasy F1 League
              </h1>
            </div>
            <p className="text-xl text-gray-300 max-w-3xl mx-auto font-rajdhani">
              Build your complete F1 empire with drivers, teams, engineers, pit crews, and strategic choices across
              every aspect of Formula 1 racing
            </p>
          </div>
          {/* Auth Buttons */}
          <div className="mb-6">
            <AuthButtons themeColor="purple" />
          </div>
          <div className="flex flex-wrap justify-center gap-4 mt-6">
              <Dialog open={showHowToPlay} onOpenChange={setShowHowToPlay}>
                <DialogTrigger asChild>
                  <button className="text-purple-400 hover:text-purple-300 px-4 py-2 text-lg font-rajdhani font-medium transition-all duration-200">
                    How We Play
                  </button>
                </DialogTrigger>
                <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto bg-gradient-to-br from-slate-900 via-purple-950/50 to-purple-950/50 border-2 border-purple-500/30 backdrop-blur-sm">
                  <DialogHeader>
                    <DialogTitle className="text-2xl font-bold bg-gradient-to-r from-purple-400 to-purple-300 bg-clip-text text-transparent">
                      How to Play Fantasy F1
                    </DialogTitle>
                    <DialogDescription className="text-lg text-gray-300">
                      Master the art of F1 prediction and team building
                    </DialogDescription>
                  </DialogHeader>
                  <div className="space-y-6 mt-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                      <Card className="bg-gray-900/50 border-gray-700">
                        <CardHeader>
                          <CardTitle className="flex items-center gap-2 text-red-400">
                            <Users className="w-5 h-5" />
                            Team Building
                          </CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-2 text-gray-300">
                          <p>• Select 2 drivers and 1 constructor within your $100M budget</p>
                          <p>• Driver prices fluctuate based on performance</p>
                          <p>• Make transfers between races (limited per season)</p>
                          <p>• Balance star drivers with budget constraints</p>
                        </CardContent>
                      </Card>
                      <Card className="bg-gray-900/50 border-gray-700">
                        <CardHeader>
                          <CardTitle className="flex items-center gap-2 text-blue-400">
                            <Target className="w-5 h-5" />
                            Technical KPIs (70% of Points)
                          </CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-2 text-gray-300">
                          <p>
                            • <strong className="text-white">Race Position:</strong> 25pts for P1, 18pts for P2, etc.
                          </p>
                          <p>
                            • <strong className="text-white">Qualifying:</strong> 5pts for pole, 3pts for front row
                          </p>
                          <p>
                            • <strong className="text-white">Fastest Lap:</strong> 3pts bonus
                          </p>
                          <p>
                            • <strong className="text-white">Points Finish:</strong> 2pts for top 10
                          </p>
                          <p>
                            • <strong className="text-white">Constructor Points:</strong> Team total × 0.1
                          </p>
                        </CardContent>
                      </Card>
                      <Card className="bg-gray-900/50 border-gray-700">
                        <CardHeader>
                          <CardTitle className="flex items-center gap-2 text-green-400">
                            <Zap className="w-5 h-5" />
                            Bonus Challenges (30% of Points)
                          </CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-2 text-gray-300">
                          <p>
                            • <strong className="text-white">Rain Prediction:</strong> Will it rain? (5pts yes/no)
                          </p>
                          <p>
                            • <strong className="text-white">Safety Car Count:</strong> Over/under 2 (3pts, lose all if
                            wrong)
                          </p>
                          <p>
                            • <strong className="text-white">Commentator Bingo:</strong> "Brilliant!" count (1pt per
                            mention)
                          </p>
                          <p>
                            • <strong className="text-white">Red Flag:</strong> Will there be one? (8pts)
                          </p>
                          <p>
                            • <strong className="text-white">Pit Stop Drama:</strong> Sub-3 second stop (4pts)
                          </p>
                        </CardContent>
                      </Card>
                      <Card className="bg-gray-900/50 border-gray-700">
                        <CardHeader>
                          <CardTitle className="flex items-center gap-2 text-purple-400">
                            <Star className="w-5 h-5" />
                            Custom Predictions
                          </CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-2 text-gray-300">
                          <p>• Create your own wacky predictions</p>
                          <p>• "How many times will Crofty say 'Lights out'?"</p>
                          <p>• "Will someone mention the weather in Monaco?"</p>
                          <p>• "Driver radio complaints about tires"</p>
                          <p>• Points awarded based on creativity and accuracy</p>
                        </CardContent>
                      </Card>
                    </div>
                    <Card className="bg-gray-900/50 border-gray-700">
                      <CardHeader>
                        <CardTitle className="text-yellow-400">Scoring System</CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                          <div>
                            <h4 className="font-semibold text-green-400">Gain Points For:</h4>
                            <ul className="text-sm space-y-1 mt-2 text-gray-300">
                              <li>• High race finishes</li>
                              <li>• Pole positions</li>
                              <li>• Fastest laps</li>
                              <li>• Correct predictions</li>
                              <li>• Bonus challenges</li>
                            </ul>
                          </div>
                          <div>
                            <h4 className="font-semibold text-red-400">Lose Points For:</h4>
                            <ul className="text-sm space-y-1 mt-2 text-gray-300">
                              <li>• DNFs (-5pts)</li>
                              <li>• Penalties (-2pts)</li>
                              <li>• Wrong over/under bets</li>
                              <li>• Last place finish (-3pts)</li>
                              <li>• Crashes (-4pts)</li>
                            </ul>
                          </div>
                          <div>
                            <h4 className="font-semibold text-blue-400">Special Rules:</h4>
                            <ul className="text-sm space-y-1 mt-2 text-gray-300">
                              <li>• Double points for home races</li>
                              <li>• Sprint weekend bonuses</li>
                              <li>• Weather multipliers</li>
                              <li>• Rookie driver bonuses</li>
                              <li>• Championship finale 2x</li>
                            </ul>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </div>
                </DialogContent>
              </Dialog>
              <Dialog open={showRules} onOpenChange={setShowRules}>
                <DialogTrigger asChild>
                  <button className="text-purple-400 hover:text-purple-300 px-4 py-2 text-lg font-rajdhani font-medium transition-all duration-200">
                    Rules & Regulations
                  </button>
                </DialogTrigger>
                <DialogContent className="max-w-3xl max-h-[80vh] overflow-y-auto bg-gradient-to-br from-slate-900 via-purple-950/50 to-purple-950/50 border-2 border-purple-500/30 backdrop-blur-sm">
                  <DialogHeader>
                    <DialogTitle className="text-2xl font-bold bg-gradient-to-r from-purple-400 to-purple-300 bg-clip-text text-transparent">
                      Official F1 Fantasy Rules
                    </DialogTitle>
                    <DialogDescription className="text-gray-300">
                      The sacred laws of our racing universe
                    </DialogDescription>
                  </DialogHeader>
                  <div className="space-y-4 mt-4">
                    <Card className="bg-gray-900/50 border-gray-700">
                      <CardHeader>
                        <CardTitle className="text-red-400 flex items-center gap-2">
                          <Flag className="w-5 h-5" />
                          The Golden Rules
                        </CardTitle>
                      </CardHeader>
                      <CardContent className="space-y-2 text-sm text-gray-300">
                        <p>
                          <Flag className="w-4 h-4 inline mr-2 text-red-400" />
                          <strong className="text-white">Rule #1:</strong> No crying when your driver bins it in Turn 1
                        </p>
                        <p>
                          <CloudRain className="w-4 h-4 inline mr-2 text-blue-400" />
                          <strong className="text-white">Rule #2:</strong> Rain predictions must be made before FP1
                          starts
                        </p>
                        <p>
                          <Mic className="w-4 h-4 inline mr-2 text-green-400" />
                          <strong className="text-white">Rule #3:</strong> Commentator word counts are final (no arguing
                          with the AI)
                        </p>
                        <p>
                          <Star className="w-4 h-4 inline mr-2 text-yellow-400" />
                          <strong className="text-white">Rule #4:</strong> Budget violations result in immediate
                          disqualification
                        </p>
                        <p>
                          <Trophy className="w-4 h-4 inline mr-2 text-purple-400" />
                          <strong className="text-white">Rule #5:</strong> Championship winner gets bragging rights
                          until next season
                        </p>
                      </CardContent>
                    </Card>
                    <Card className="bg-gray-900/50 border-gray-700">
                      <CardHeader>
                        <CardTitle className="text-yellow-400 flex items-center gap-2">
                          <Timer className="w-5 h-5" />
                          Timing Rules
                        </CardTitle>
                      </CardHeader>
                      <CardContent className="space-y-2 text-sm text-gray-300">
                        <p>
                          <Timer className="w-4 h-4 inline mr-2 text-blue-400" />
                          Team changes lock 1 hour before FP1
                        </p>
                        <p>
                          <Target className="w-4 h-4 inline mr-2 text-red-400" />
                          Predictions must be submitted before qualifying
                        </p>
                        <p>
                          <Zap className="w-4 h-4 inline mr-2 text-yellow-400" />
                          Maximum 3 transfers per race weekend
                        </p>
                        <p>
                          <Settings className="w-4 h-4 inline mr-2 text-purple-400" />
                          Late submissions are automatically set to "chaos mode"
                        </p>
                        <p>
                          <Shield className="w-4 h-4 inline mr-2 text-red-400" />
                          Emergency transfers allowed only for driver illness/injury
                        </p>
                      </CardContent>
                    </Card>
                    <Card className="bg-gray-900/50 border-gray-700">
                      <CardHeader>
                        <CardTitle className="text-green-400 flex items-center gap-2">
                          <CloudRain className="w-5 h-5" />
                          Weather & Chaos Rules
                        </CardTitle>
                      </CardHeader>
                      <CardContent className="space-y-2 text-sm text-gray-300">
                        <p>🌦️ Rain = 1.5x multiplier on all points</p>
                        <p>🚩 Red flags void all over/under bets (refund points)</p>
                        <p>🔥 Safety car appearances double commentator word points</p>
                        <p>❄️ Snow/extreme weather = 2x multiplier (if race happens)</p>
                        <p>🌪️ "Act of God" clause: Meteors void all bets</p>
                      </CardContent>
                    </Card>
                    <Card className="bg-gray-900/50 border-gray-700">
                      <CardHeader>
                        <CardTitle className="text-purple-400 flex items-center gap-2">
                          <Mic className="w-5 h-5" />
                          Commentator Bingo Rules
                        </CardTitle>
                      </CardHeader>
                      <CardContent className="space-y-2 text-sm text-gray-300">
                        <p>
                          <Mic className="w-4 h-4 inline mr-2 text-blue-400" />
                          "Brilliant!" = 1pt per mention (Crofty only)
                        </p>
                        <p>
                          <Flag className="w-4 h-4 inline mr-2 text-green-400" />
                          "Lights out and away we go!" = 5pts (race start only)
                        </p>
                        <p>
                          <Flame className="w-4 h-4 inline mr-2 text-red-400" />
                          "That's a big one!" = 3pts per crash
                        </p>
                        <p>
                          <Target className="w-4 h-4 inline mr-2 text-yellow-400" />
                          "Bono, my tires are gone" = 4pts (Lewis only)
                        </p>
                        <p>
                          <CloudRain className="w-4 h-4 inline mr-2 text-blue-400" />
                          Weather mentions = 0.5pts each (max 20 per race)
                        </p>
                        <p>
                          <Settings className="w-4 h-4 inline mr-2 text-purple-400" />
                          AI monitors all commentary automatically
                        </p>
                      </CardContent>
                    </Card>
                    <Card className="bg-gray-900/50 border-gray-700">
                      <CardHeader>
                        <CardTitle className="text-orange-400">Penalty System</CardTitle>
                      </CardHeader>
                      <CardContent className="space-y-2 text-sm text-gray-300">
                        <p>
                          <HelpCircle className="w-4 h-4 inline mr-2 text-yellow-400" />
                          Unsporting predictions: -10pts
                        </p>
                        <p>
                          <Shield className="w-4 h-4 inline mr-2 text-red-400" />
                          Offensive custom bets: Season ban
                        </p>
                        <p>
                          <Crown className="w-4 h-4 inline mr-2 text-yellow-400" />
                          Budget cheating: -50pts + public shame
                        </p>
                        <p>
                          <Settings className="w-4 h-4 inline mr-2 text-purple-400" />
                          Attempting to hack the AI: Lifetime ban
                        </p>
                        <p>
                          <Users className="w-4 h-4 inline mr-2 text-blue-400" />
                          Excessive complaining: Mandatory optimism training
                        </p>
                      </CardContent>
                    </Card>
                  </div>
                </DialogContent>
              </Dialog>
            </div>
          </div>
          <div className="space-y-6">
            <div className="grid w-full grid-cols-8 rounded-lg p-1">
              <button
                onClick={() => setActiveTab("drivers")}
                className={`flex items-center justify-center py-2 px-4 rounded-md transition-all duration-200 font-rajdhani font-medium ${
                  activeTab === "drivers" 
                    ? "glass-purple text-purple-300 shadow-lg scale-105 border border-purple-400/50" 
                    : "text-purple-400 hover:text-purple-300 hover:bg-purple-400/10"
                }`}
              >
                Drivers
              </button>
              <button
                onClick={() => setActiveTab("constructors")}
                className={`flex items-center justify-center py-2 px-4 rounded-md transition-all duration-200 font-rajdhani font-medium ${
                  activeTab === "constructors" 
                    ? "glass-purple text-purple-300 shadow-lg scale-105 border border-purple-400/50" 
                    : "text-purple-400 hover:text-purple-300 hover:bg-purple-400/10"
                }`}
              >
                Teams
              </button>
              <button
                onClick={() => setActiveTab("principals")}
                className={`flex items-center justify-center py-2 px-4 rounded-md transition-all duration-200 font-rajdhani font-medium ${
                  activeTab === "principals" 
                    ? "glass-purple text-purple-300 shadow-lg scale-105 border border-purple-400/50" 
                    : "text-purple-400 hover:text-purple-300 hover:bg-purple-400/10"
                }`}
              >
                Principals
              </button>
              <button
                onClick={() => setActiveTab("engineers")}
                className={`flex items-center justify-center py-2 px-4 rounded-md transition-all duration-200 font-rajdhani font-medium ${
                  activeTab === "engineers" 
                    ? "glass-purple text-purple-300 shadow-lg scale-105 border border-purple-400/50" 
                    : "text-purple-400 hover:text-purple-300 hover:bg-purple-400/10"
                }`}
              >
                Engineers
              </button>
              <button
                onClick={() => setActiveTab("engines")}
                className={`flex items-center justify-center py-2 px-4 rounded-md transition-all duration-200 font-rajdhani font-medium ${
                  activeTab === "engines" 
                    ? "glass-purple text-purple-300 shadow-lg scale-105 border border-purple-400/50" 
                    : "text-purple-400 hover:text-purple-300 hover:bg-purple-400/10"
                }`}
              >
                Engines
              </button>
              <button
                onClick={() => setActiveTab("pit-crews")}
                className={`flex items-center justify-center py-2 px-4 rounded-md transition-all duration-200 font-rajdhani font-medium ${
                  activeTab === "pit-crews" 
                    ? "glass-purple text-purple-300 shadow-lg scale-105 border border-purple-400/50" 
                    : "text-purple-400 hover:text-purple-300 hover:bg-purple-400/10"
                }`}
              >
                Pit Crews
              </button>
              <button
                onClick={() => setActiveTab("tires")}
                className={`flex items-center justify-center py-2 px-4 rounded-md transition-all duration-200 font-rajdhani font-medium ${
                  activeTab === "tires" 
                    ? "glass-purple text-purple-300 shadow-lg scale-105 border border-purple-400/50" 
                    : "text-purple-400 hover:text-purple-300 hover:bg-purple-400/10"
                }`}
              >
                Tires
              </button>
              <button
                onClick={() => setActiveTab("my-team")}
                className={`flex items-center justify-center py-2 px-4 rounded-md transition-all duration-200 font-rajdhani font-medium ${
                  activeTab === "my-team" 
                    ? "glass-purple text-purple-300 shadow-lg scale-105 border border-purple-400/50" 
                    : "text-purple-400 hover:text-purple-300 hover:bg-purple-400/10"
                }`}
              >
                My Team
              </button>
            </div>
            {/* Tab Contents */}
            {activeTab === "drivers" && (
              <div className="space-y-4">
              <div className="flex items-center gap-4 mb-6">
                <div className="relative flex-1">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                  <Input
                    placeholder="Search drivers..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pl-10 bg-gray-800 border-gray-700 text-white"
                  />
                </div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
                {filteredDrivers.map((driver) => (
                  <Card key={driver.name} className="bg-gray-900/50 border-gray-700 hover:border-purple-500/50 transition-all duration-200 cursor-pointer"
                    onClick={() => {
                      const updatedTeam = { ...myTeam }
                      if (updatedTeam.drivers.length < 2) {
                        updatedTeam.drivers.push(driver)
                      } else {
                        updatedTeam.drivers[0] = updatedTeam.drivers[1]
                        updatedTeam.drivers[1] = driver
                      }
                      setMyTeam(updatedTeam)
                      setShowTeamModal(true)
                    }}
                  >
                    <CardContent className="p-4">
                      <div className="flex items-center justify-between mb-2">
                        <h3 className="font-semibold text-white text-sm">{driver.name}</h3>
                        <Badge className={getFormBadge(driver.form)}>{driver.form}</Badge>
                      </div>
                      <div className="space-y-1 text-xs text-gray-400">
                        <div className="flex justify-between">
                          <span>Team:</span>
                          <span className="text-white">{driver.team}</span>
                        </div>
                        <div className="flex justify-between">
                          <span>Price:</span>
                          <span className="text-green-400">{formatCurrency(driver.price)}</span>
                        </div>
                        <div className="flex justify-between">
                          <span>Points:</span>
                          <span className="text-blue-400">{driver.points}</span>
                        </div>
                        <div className="flex justify-between">
                          <span>Engine:</span>
                          <span className="text-orange-400">{driver.engine}</span>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
              </div>
            )}
            {activeTab === "constructors" && (
              <div className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
                {constructors.map((constructor) => (
                  <Card key={constructor.name} className="bg-gray-900/50 border-gray-700 hover:border-purple-500/50 transition-all duration-200 cursor-pointer"
                    onClick={() => {
                      const updatedTeam = { ...myTeam }
                      updatedTeam.constructor = constructor
                      setMyTeam(updatedTeam)
                      setShowTeamModal(true)
                    }}
                  >
                    <CardContent className="p-4">
                      <div className="flex items-center justify-between mb-2">
                        <h3 className="font-semibold text-white text-sm">{constructor.name}</h3>
                        <Badge className={getFormBadge(constructor.form)}>{constructor.form}</Badge>
                      </div>
                      <div className="space-y-1 text-xs text-gray-400">
                        <div className="flex justify-between">
                          <span>Price:</span>
                          <span className="text-green-400">{formatCurrency(constructor.price)}</span>
                        </div>
                        <div className="flex justify-between">
                          <span>Points:</span>
                          <span className="text-blue-400">{constructor.points}</span>
                        </div>
                        <div className="flex justify-between">
                          <span>Engine:</span>
                          <span className="text-orange-400">{constructor.engine}</span>
                        </div>
                        <div className="space-y-1 mt-2">
                          <span className="text-gray-500">Drivers:</span>
                          {constructor.drivers.map((driver, idx) => (
                            <div key={idx} className="text-gray-300 text-xs">{driver}</div>
                          ))}
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
              </div>
            )}
            {activeTab === "principals" && (
              <div className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
                {teamPrincipals.map((principal) => (
                  <Card key={principal.name} className="bg-gray-900/50 border-gray-700 hover:border-purple-500/50 transition-all duration-200 cursor-pointer"
                    onClick={() => {
                      const updatedTeam = { ...myTeam }
                      updatedTeam.principal = principal
                      setMyTeam(updatedTeam)
                      setShowTeamModal(true)
                    }}
                  >
                    <CardContent className="p-4">
                      <div className="flex items-center justify-between mb-2">
                        <h3 className="font-semibold text-white text-sm">{principal.name}</h3>
                        <Badge className="bg-purple-100 text-purple-800">{principal.specialty}</Badge>
                      </div>
                      <div className="space-y-1 text-xs text-gray-400">
                        <div className="flex justify-between">
                          <span>Team:</span>
                          <span className="text-white">{principal.team}</span>
                        </div>
                        <div className="flex justify-between">
                          <span>Price:</span>
                          <span className="text-green-400">{formatCurrency(principal.price)}</span>
                        </div>
                        <div className="flex justify-between">
                          <span>Points:</span>
                          <span className="text-blue-400">{principal.points}</span>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
              </div>
            )}
            {activeTab === "engineers" && (
              <div className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
                {engineers.map((engineer) => (
                  <Card key={engineer.name} className="bg-gray-900/50 border-gray-700 hover:border-purple-500/50 transition-all duration-200 cursor-pointer"
                    onClick={() => {
                      const updatedTeam = { ...myTeam }
                      updatedTeam.engineer = engineer
                      setMyTeam(updatedTeam)
                      setShowTeamModal(true)
                    }}
                  >
                    <CardContent className="p-4">
                      <div className="flex items-center justify-between mb-2">
                        <h3 className="font-semibold text-white text-sm">{engineer.name}</h3>
                        <Badge className="bg-blue-100 text-blue-800">{engineer.specialty}</Badge>
                      </div>
                      <div className="space-y-1 text-xs text-gray-400">
                        <div className="flex justify-between">
                          <span>Team:</span>
                          <span className="text-white">{engineer.team}</span>
                        </div>
                        <div className="flex justify-between">
                          <span>Price:</span>
                          <span className="text-green-400">{formatCurrency(engineer.price)}</span>
                        </div>
                        <div className="flex justify-between">
                          <span>Points:</span>
                          <span className="text-blue-400">{engineer.points}</span>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
              </div>
            )}
            {activeTab === "engines" && (
              <div className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
                {engines.map((engine) => (
                  <Card key={engine.name} className="bg-gray-900/50 border-gray-700 hover:border-purple-500/50 transition-all duration-200 cursor-pointer"
                    onClick={() => {
                      const updatedTeam = { ...myTeam }
                      updatedTeam.engine = engine
                      setMyTeam(updatedTeam)
                      setShowTeamModal(true)
                    }}
                  >
                    <CardContent className="p-4">
                      <div className="flex items-center justify-between mb-2">
                        <h3 className="font-semibold text-white text-sm">{engine.name}</h3>
                        <Badge className="bg-orange-100 text-orange-800">{engine.manufacturer}</Badge>
                      </div>
                      <div className="space-y-1 text-xs text-gray-400">
                        <div className="flex justify-between">
                          <span>Price:</span>
                          <span className="text-green-400">{formatCurrency(engine.price)}</span>
                        </div>
                        <div className="flex justify-between">
                          <span>Points:</span>
                          <span className="text-blue-400">{engine.points}</span>
                        </div>
                        <div className="flex justify-between">
                          <span>Power:</span>
                          <span className="text-red-400">{engine.power}hp</span>
                        </div>
                        <div className="flex justify-between">
                          <span>Reliability:</span>
                          <span className="text-green-400">{engine.reliability}%</span>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
              </div>
            )}
            {activeTab === "pit-crews" && (
              <div className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
                {pitCrews.map((crew) => (
                  <Card key={crew.name} className="bg-gray-900/50 border-gray-700 hover:border-purple-500/50 transition-all duration-200 cursor-pointer"
                    onClick={() => {
                      const updatedTeam = { ...myTeam }
                      updatedTeam.pitCrew = crew
                      setMyTeam(updatedTeam)
                      setShowTeamModal(true)
                    }}
                  >
                    <CardContent className="p-4">
                      <div className="flex items-center justify-between mb-2">
                        <h3 className="font-semibold text-white text-sm">{crew.name}</h3>
                        <Badge className="bg-yellow-100 text-yellow-800">{crew.specialty}</Badge>
                      </div>
                      <div className="space-y-1 text-xs text-gray-400">
                        <div className="flex justify-between">
                          <span>Team:</span>
                          <span className="text-white">{crew.team}</span>
                        </div>
                        <div className="flex justify-between">
                          <span>Price:</span>
                          <span className="text-green-400">{formatCurrency(crew.price)}</span>
                        </div>
                        <div className="flex justify-between">
                          <span>Avg Time:</span>
                          <span className="text-blue-400">{crew.avgTime}s</span>
                        </div>
                        <div className="flex justify-between">
                          <span>Points:</span>
                          <span className="text-blue-400">{crew.points}</span>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
              </div>
            )}
            {activeTab === "tires" && (
              <div className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
                {tireStrategies.map((strategy) => (
                  <Card key={strategy.name} className="bg-gray-900/50 border-gray-700 hover:border-purple-500/50 transition-all duration-200 cursor-pointer"
                    onClick={() => {
                      const updatedTeam = { ...myTeam }
                      updatedTeam.tireStrategy = strategy
                      setMyTeam(updatedTeam)
                      setShowTeamModal(true)
                    }}
                  >
                    <CardContent className="p-4">
                      <div className="flex items-center justify-between mb-2">
                        <h3 className="font-semibold text-white text-sm">{strategy.name}</h3>
                        <Badge className={`${strategy.risk === 'High' || strategy.risk === 'Very High' ? 'bg-red-100 text-red-800' : strategy.risk === 'Medium' ? 'bg-yellow-100 text-yellow-800' : 'bg-green-100 text-green-800'}`}>
                          {strategy.risk} Risk
                        </Badge>
                      </div>
                      <div className="space-y-1 text-xs text-gray-400">
                        <div className="flex justify-between">
                          <span>Strategy:</span>
                          <span className="text-white">{strategy.description}</span>
                        </div>
                        <div className="flex justify-between">
                          <span>Price:</span>
                          <span className="text-green-400">{formatCurrency(strategy.price)}</span>
                        </div>
                        <div className="flex justify-between">
                          <span>Points:</span>
                          <span className="text-blue-400">{strategy.points}</span>
                        </div>
                        <div className="flex justify-between">
                          <span>Reward:</span>
                          <span className="text-purple-400">{strategy.reward}</span>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
              </div>
            )}
            {activeTab === "my-team" && (
              <div className="space-y-4">
              <div className="text-center py-8">
                <Button 
                  onClick={() => setShowTeamModal(true)}
                  className="bg-gradient-to-r from-purple-600 to-purple-800 text-purple-400 hover:from-purple-700 hover:to-purple-900 px-8 py-4 text-lg font-bold rounded-xl shadow-lg transition-all duration-300 transform hover:scale-105 backdrop-blur-sm border border-purple-400/50"
                >
                  <Crown className="w-6 h-6 mr-3" />
                  View My Team
                </Button>
              </div>
              </div>
            )}
          </div>
          {/* Team Modal */}
          <Dialog open={showTeamModal} onOpenChange={setShowTeamModal}>
            <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto bg-gradient-to-br from-slate-900 via-purple-950/50 to-purple-950/50 border-2 border-purple-500/30 backdrop-blur-sm">
              <DialogHeader>
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <Crown className="w-8 h-8 text-yellow-400" />
                    <div>
                      <DialogTitle className="text-2xl font-bold text-white flex items-center gap-2">
                        <select 
                          value={myTeam.name} 
                          onChange={(e) => setMyTeam({...myTeam, name: e.target.value})}
                          className="bg-transparent text-white border-none outline-none text-2xl font-bold cursor-pointer hover:text-purple-300"
                        >
                          {teamNameOptions.map(name => (
                            <option key={name} value={name} className="bg-gray-800 text-white">{name}</option>
                          ))}
                        </select>
                      </DialogTitle>
                      <DialogDescription className="text-gray-300">Your Fantasy F1 Team</DialogDescription>
                    </div>
                  </div>
                  <div className="text-right">
                    <div className="text-3xl font-bold bg-gradient-to-r from-green-400 to-green-300 bg-clip-text text-transparent">
                      {calculateTotalPoints()} pts
                    </div>
                    <div className="text-sm text-gray-400">Rank #{myTeam.rank.toLocaleString()}</div>
                  </div>
                </div>
              </DialogHeader>
              
              <div className="space-y-6 mt-6">
                {/* Budget Overview */}
                <Card className="bg-gray-900/50 border-gray-700">
                  <CardHeader>
                    <CardTitle className="text-white flex items-center gap-2">
                      <Trophy className="w-5 h-5 text-yellow-400" />
                      Budget Overview
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <p className="text-gray-400 text-sm">Total Budget</p>
                        <p className="text-white text-xl font-bold">{formatCurrency(myTeam.budget)}</p>
                      </div>
                      <div>
                        <p className="text-gray-400 text-sm">Remaining</p>
                        <p className="text-green-400 text-xl font-bold">{formatCurrency(myTeam.budget - calculateTotalSpent())}</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
                {/* Team Composition */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  {/* Drivers */}
                  <Card className="bg-gray-900/50 border-gray-700">
                    <CardHeader>
                      <CardTitle className="text-white flex items-center gap-2">
                        <Users className="w-5 h-5 text-blue-400" />
                        Drivers ({myTeam.drivers.length}/2)
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-3">
                        {myTeam.drivers.map((driver, index) => (
                          <div key={index} className="flex justify-between items-center p-3 bg-gray-800/50 rounded">
                            <div>
                              <p className="text-white font-semibold">{driver.name}</p>
                              <p className="text-gray-400 text-sm">{driver.team}</p>
                            </div>
                            <div className="text-right">
                              <p className="text-green-400 font-semibold">{formatCurrency(driver.price)}</p>
                              <p className="text-blue-400 text-sm">{driver.points} pts</p>
                            </div>
                          </div>
                        ))}
                        {myTeam.drivers.length < 2 && (
                          <div className="p-3 border-2 border-dashed border-gray-600 rounded text-center">
                            <p className="text-gray-400">Select a driver</p>
                          </div>
                        )}
                      </div>
                    </CardContent>
                  </Card>
                  {/* Constructor */}
                  <Card className="bg-gray-900/50 border-gray-700">
                    <CardHeader>
                      <CardTitle className="text-white flex items-center gap-2">
                        <Target className="w-5 h-5 text-purple-400" />
                        Constructor
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      {myTeam.constructor ? (
                        <div className="flex justify-between items-center p-3 bg-gray-800/50 rounded">
                          <div>
                            <p className="text-white font-semibold">{myTeam.constructor.name}</p>
                            <p className="text-gray-400 text-sm">{myTeam.constructor.engine} Engine</p>
                          </div>
                          <div className="text-right">
                            <p className="text-green-400 font-semibold">{formatCurrency(myTeam.constructor.price)}</p>
                            <p className="text-blue-400 text-sm">{myTeam.constructor.points} pts</p>
                          </div>
                        </div>
                      ) : (
                        <div className="p-3 border-2 border-dashed border-gray-600 rounded text-center">
                          <p className="text-gray-400">Select a constructor</p>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                  {/* Principal */}
                  <Card className="bg-gray-900/50 border-gray-700">
                    <CardHeader>
                      <CardTitle className="text-white flex items-center gap-2">
                        <Crown className="w-5 h-5 text-yellow-400" />
                        Team Principal
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      {myTeam.principal ? (
                        <div className="flex justify-between items-center p-3 bg-gray-800/50 rounded">
                          <div>
                            <p className="text-white font-semibold">{myTeam.principal.name}</p>
                            <p className="text-gray-400 text-sm">{myTeam.principal.specialty}</p>
                          </div>
                          <div className="text-right">
                            <p className="text-green-400 font-semibold">{formatCurrency(myTeam.principal.price)}</p>
                            <p className="text-blue-400 text-sm">{myTeam.principal.points} pts</p>
                          </div>
                        </div>
                      ) : (
                        <div className="p-3 border-2 border-dashed border-gray-600 rounded text-center">
                          <p className="text-gray-400">Select a team principal</p>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                  {/* Engineer */}
                  <Card className="bg-gray-900/50 border-gray-700">
                    <CardHeader>
                      <CardTitle className="text-white flex items-center gap-2">
                        <Wrench className="w-5 h-5 text-orange-400" />
                        Chief Engineer
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      {myTeam.engineer ? (
                        <div className="flex justify-between items-center p-3 bg-gray-800/50 rounded">
                          <div>
                            <p className="text-white font-semibold">{myTeam.engineer.name}</p>
                            <p className="text-gray-400 text-sm">{myTeam.engineer.specialty}</p>
                          </div>
                          <div className="text-right">
                            <p className="text-green-400 font-semibold">{formatCurrency(myTeam.engineer.price)}</p>
                            <p className="text-blue-400 text-sm">{myTeam.engineer.points} pts</p>
                          </div>
                        </div>
                      ) : (
                        <div className="p-3 border-2 border-dashed border-gray-600 rounded text-center">
                          <p className="text-gray-400">Select an engineer</p>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                  {/* Engine */}
                  <Card className="bg-gray-900/50 border-gray-700">
                    <CardHeader>
                      <CardTitle className="text-white flex items-center gap-2">
                        <Fuel className="w-5 h-5 text-red-400" />
                        Power Unit
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      {myTeam.engine ? (
                        <div className="flex justify-between items-center p-3 bg-gray-800/50 rounded">
                          <div>
                            <p className="text-white font-semibold">{myTeam.engine.name}</p>
                            <p className="text-gray-400 text-sm">{myTeam.engine.power}hp • {myTeam.engine.reliability}% reliability</p>
                          </div>
                          <div className="text-right">
                            <p className="text-green-400 font-semibold">{formatCurrency(myTeam.engine.price)}</p>
                            <p className="text-blue-400 text-sm">{myTeam.engine.points} pts</p>
                          </div>
                        </div>
                      ) : (
                        <div className="p-3 border-2 border-dashed border-gray-600 rounded text-center">
                          <p className="text-gray-400">Select an engine</p>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                  {/* Pit Crew */}
                  <Card className="bg-gray-900/50 border-gray-700">
                    <CardHeader>
                      <CardTitle className="text-white flex items-center gap-2">
                        <Timer className="w-5 h-5 text-green-400" />
                        Pit Crew
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      {myTeam.pitCrew ? (
                        <div className="flex justify-between items-center p-3 bg-gray-800/50 rounded">
                          <div>
                            <p className="text-white font-semibold">{myTeam.pitCrew.name}</p>
                            <p className="text-gray-400 text-sm">{myTeam.pitCrew.avgTime}s avg • {myTeam.pitCrew.specialty}</p>
                          </div>
                          <div className="text-right">
                            <p className="text-green-400 font-semibold">{formatCurrency(myTeam.pitCrew.price)}</p>
                            <p className="text-blue-400 text-sm">{myTeam.pitCrew.points} pts</p>
                          </div>
                        </div>
                      ) : (
                        <div className="p-3 border-2 border-dashed border-gray-600 rounded text-center">
                          <p className="text-gray-400">Select a pit crew</p>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                  {/* Tire Strategy */}
                  <Card className="bg-gray-900/50 border-gray-700">
                    <CardHeader>
                      <CardTitle className="text-white flex items-center gap-2">
                        <Shield className="w-5 h-5 text-purple-400" />
                        Tire Strategy
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      {myTeam.tireStrategy ? (
                        <div className="flex justify-between items-center p-3 bg-gray-800/50 rounded">
                          <div>
                            <p className="text-white font-semibold">{myTeam.tireStrategy.name}</p>
                            <p className="text-gray-400 text-sm">{myTeam.tireStrategy.description} • {myTeam.tireStrategy.risk} Risk</p>
                          </div>
                          <div className="text-right">
                            <p className="text-green-400 font-semibold">{formatCurrency(myTeam.tireStrategy.price)}</p>
                            <p className="text-blue-400 text-sm">{myTeam.tireStrategy.points} pts</p>
                          </div>
                        </div>
                      ) : (
                        <div className="p-3 border-2 border-dashed border-gray-600 rounded text-center">
                          <p className="text-gray-400">Select a tire strategy</p>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                </div>
                {/* Leaderboard */}
                <Card className="bg-gray-900/50 border-gray-700">
                  <CardHeader>
                    <CardTitle className="text-white flex items-center gap-2">
                      <Trophy className="w-5 h-5 text-yellow-400" />
                      Leaderboard
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      {leaderboard.map((entry) => (
                        <div key={entry.rank} className="flex items-center justify-between p-2 bg-gray-800/50 rounded">
                          <div className="flex items-center gap-3">
                            <span className={`w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold ${
                              entry.rank === 1 ? 'bg-yellow-400 text-black' : 
                              entry.rank === 2 ? 'bg-gray-400 text-black' : 
                              entry.rank === 3 ? 'bg-orange-400 text-black' : 'bg-gray-600 text-white'
                            }`}>
                              {entry.rank}
                            </span>
                            <div>
                              <p className="text-white text-sm font-semibold">{entry.name}</p>
                              <p className="text-gray-400 text-xs">{entry.team}</p>
                            </div>
                          </div>
                          <div className="text-right">
                            <p className="text-green-400 font-semibold">{entry.points}</p>
                            <p className={`text-xs ${entry.change > 0 ? 'text-green-400' : entry.change < 0 ? 'text-red-400' : 'text-gray-400'}`}>
                              {entry.change > 0 ? '+' : ''}{entry.change}
                            </p>
                          </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </div>
            </DialogContent>
          </Dialog>
        </div>
      </div>
    </div>
  )
}
